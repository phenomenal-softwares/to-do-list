When I ran the function immediately for testing purposes yesterday (by deliberately setting a time that has passed, thereby setting the delay to <0), it worked. But now the following day after setting the time to 12am, the logic does not seem to distinguish between if a time has passed, because it still didn't execute the needful, still waiting till another 12am

useEffect(() => {
    const checkTaskStatus = () => {
      const now = new Date();
      console.log("Running task status check at:", now);
  
      const updatedTasks = tasks
        .map((task) => {
          const taskCreatedDate = new Date(task.createdDate);
          const taskAgeInDays = Math.floor((now - taskCreatedDate) / (1000 * 60 * 60 * 24));
  
          // Rule 1: Clear tasks marked as completed or those without repeatDays
          if (task.repeatDays === 1) {
              console.log("Removing task:", task);
              return null;
          }
  
          // Rule 2 & 3: Handle repeating tasks
          if (task.repeatDays > 1) {
            if (taskAgeInDays >= task.repeatDays) {
              console.log("Removing expired repeating task:", task);
              return null;
            } else {
              console.log("Resetting repeating task to pending:", task);
              return { ...task, completed: false };
            }
          }
  
          return task;
        })
        .filter(Boolean);
  
      if (JSON.stringify(tasks) !== JSON.stringify(updatedTasks)) {
        console.log("Updating tasks after cleanup:", updatedTasks);
        setTasks(updatedTasks);
      } else {
        console.log("No task updates required.");
      }
    };
  
    const scheduleTestCheck = () => {
      const now = new Date();
      const midnight = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0, 0); // Next midnight
      const delay = midnight - now;
  
      if (delay <= 0) {
        console.log("Running test immediately as the time has already passed.");
        checkTaskStatus();
        return null;
      }
  
      console.log(`Scheduling test task status check in ${Math.round(delay / 1000)} seconds.`);
  
      const timer = setTimeout(() => {
        checkTaskStatus();
      }, delay);
  
      return timer; // Return the timer ID for cleanup
    };
  
    const timer = scheduleTestCheck();
  
    return () => {
      console.log("Clearing previous test timer.");
      if (timer) clearTimeout(timer);
    };
  }, [tasks]);